// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexandr-kaa/otus_golang_hw/hw04_lru_cache (interfaces: List)

// Package mock_test is a generated GoMock package.
package hw04_lru_cache

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockList is a mock of List interface
type MockList struct {
	ctrl     *gomock.Controller
	recorder *MockListMockRecorder
}

// MockListMockRecorder is the mock recorder for MockList
type MockListMockRecorder struct {
	mock *MockList
}

// NewMockList creates a new mock instance
func NewMockList(ctrl *gomock.Controller) *MockList {
	mock := &MockList{ctrl: ctrl}
	mock.recorder = &MockListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockList) EXPECT() *MockListMockRecorder {
	return m.recorder
}

// Back mocks base method
func (m *MockList) Back() *listItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Back")
	ret0, _ := ret[0].(*listItem)
	return ret0
}

// Back indicates an expected call of Back
func (mr *MockListMockRecorder) Back() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Back", reflect.TypeOf((*MockList)(nil).Back))
}

// Front mocks base method
func (m *MockList) Front() *listItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Front")
	ret0, _ := ret[0].(*listItem)
	return ret0
}

// Front indicates an expected call of Front
func (mr *MockListMockRecorder) Front() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Front", reflect.TypeOf((*MockList)(nil).Front))
}

// Len mocks base method
func (m *MockList) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockListMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockList)(nil).Len))
}

// MoveToFront mocks base method
func (m *MockList) MoveToFront(arg0 *listItem) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MoveToFront", arg0)
}

// MoveToFront indicates an expected call of MoveToFront
func (mr *MockListMockRecorder) MoveToFront(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveToFront", reflect.TypeOf((*MockList)(nil).MoveToFront), arg0)
}

// PushBack mocks base method
func (m *MockList) PushBack(arg0 interface{}) *listItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushBack", arg0)
	ret0, _ := ret[0].(*listItem)
	return ret0
}

// PushBack indicates an expected call of PushBack
func (mr *MockListMockRecorder) PushBack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushBack", reflect.TypeOf((*MockList)(nil).PushBack), arg0)
}

// PushFront mocks base method
func (m *MockList) PushFront(arg0 interface{}) *listItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushFront", arg0)
	ret0, _ := ret[0].(*listItem)
	return ret0
}

// PushFront indicates an expected call of PushFront
func (mr *MockListMockRecorder) PushFront(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushFront", reflect.TypeOf((*MockList)(nil).PushFront), arg0)
}

// Remove mocks base method
func (m *MockList) Remove(arg0 *listItem) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", arg0)
}

// Remove indicates an expected call of Remove
func (mr *MockListMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockList)(nil).Remove), arg0)
}
